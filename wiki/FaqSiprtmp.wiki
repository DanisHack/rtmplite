#labels FAQ,siprtmp
= Frequently Asked Questions (SIP-RTMP gateway) =

=== My gateway does not work. What do I do? ===

Please start your gateway with "-d" command line option, so that it prints detailed trace information including the SIP messages. Then capture the trace, e.g., using Unix "script" command. Finally, send your error report and the trace to [http://groups.google.com/group/myprojectguide support group]. You can post a message from web or via email after joining the group.

=== Does it work with other SIP servers or clients? ===

Depends on what the other SIP client or server is. If there are interoperability bugs, we will be happy to resolve those.

=== Can I directly connect from Flash client to SIP server? ===

No. You need to go through the siprtmp.py (SIP-RTMP gateway). The path is Flash client connect to SIP-RTMP gateway, which in turn registers and communicates with the SIP server. But you can communicate with any existing SIP server, as long as there are no interoperability bugs, between the gateway and the SIP server.

=== How do I test a SIP registration and call? ===

Using the builtin videoPhone.swf applictaion (which is also hosted at http://myprojectguide.org/p/siprtmp). Support you want to register with gateway running on gateway.host.com and SIP server of iptel.org with username myname, password mypass, use the following input text when prompted to register.
Gateway URL: rtmp://gateway.host.com/sip
SIP URL: myname@iptel.org
Auth username: myname
Auth password: mypass
Display name: My Name
Once registered, use the SIP URL of target to make call, e.g., yourname@iptel.org

=== How do I build my own Flash application to connect to the gateway? ===

The necessary API is documented in the http://code.google.com/p/rtmplite/source/browse/trunk/siprtmp.py source code itself. In particular, you use NetConnection's connect and supply the appropriate parameters.

=== When dialing out from web client, should I dial phone number or SIP address? ===

You must dial a SIP address of the form "user@domain" or "user@ip-address". If you have PSTN dialing available via your gateway, then use the "phone-number@ip-address-of-pstn-gateway", e.g., "7140@192.1.2.3" instead of just "7140". 

=== When I call from X-lite it responds with "488 Incompatible SDP". Why? ===

By default X-lite has only PCMU and PCMA codec enabled. You will need to go to audio options of X-lite and enable the Speex/16000 (wideband codec).

=== Does it work with Asterisk? ===

Depends on what codec Asterisk supports. The siprtmp gateway supports speex/16000 or 8000 (audio) and x-flv/90000 (video). From what I understand, the Asterisk codec does not support speex. You can compile Asterisk to support speex using speex/8000 and not speex/16000. The VideoPhone and siprtmp gateway now have support to dynamically switch from default 16000 (wideband) to 8000 (narrowband). Please see the next question on how to make siprtmp work with 8000 Hz sampling.

=== How can I use Speex/8000 (narrowband) instead of Speex/16000 (wideband)? ===

Flash Player by default uses 16000 Hz sampling for Speex. The new version of siprtmp and rtmplite (version 6.0 and above) support both 8000 and 16000 Hz sampling for Speex. In the VideoPhone Flash application, you can select the narrowband (8000) Speex in the right click menu. The right click menu allows you to switch between narrowband and wideband. The selection must be done before registration, but is saved along with you other registration data if you select "Remember me" option. The selection is supplied to the siprtmp.py gateway in the NetConnection.connect method as the rate attribute, and is used for audio format sampling rate.

=== How to send DTMF touch tone? ===

I have added a patch sent by another person to both VideoPhone and siprtmp.py. During a call, you can click on bottom-left corner of VideoPhone Flash application to show a hidden dial-pad. The dial-pad will allow you to enter digits during a call. It invokes "sendDTMF" method on siprtmp.py, which in turn uses the rfc2833.py module to send out the digits if the remote end had sent "telephone-event" in SDP during session initiation. Please use the latest code from SVN/r34 or later to get this patch.

The following text describes how to use RFC 2198 along with RFC 2833 to send digits, and how to use SIP INFO method to send digits:

Using RFC2833 is preferred way to send DTMF touch tones. You can use the rfc2833.py and rfc2198.py modules of p2p-sip/39peers project as mentioned in http://39peers.net/download/doc/report.html (search for "Touch-tone interface" towards the end). Since siprtmp.py already has the RTP session, you can use the existing RTP session to
send out the digits. For example if you sending digits "1234" first create the RFC 2833 payloads as:
{{{
dtmfs = rfc2833.createDTMFs("1234")
}}}
This will return a list of DTMF objects. Then use RFC 2198 to create redundant payloads. Suppose your timestamp is 10000, interval of 1600 between digits and negotiated payload-type is 97, then as follows:
{{{
t0, td, pt = 10000, 1600, 97
input = []
for dtmf in dtmfs:
    dtmf = repr(dtmf)    # convert DTMF to str
    input.append((pt, t0, dtmf))
    t0 += td
payload = rfc2198.createRedundant(input)
}}}
You can now use the payload as the RTP's payload to send out in the existing RTP session. See siprtmp.py's rtmpdata method. Something like the following should work, where fmt should be set to your audio format for touch-tone.
{{{
self.session.media.send(payload=payload, ts=10000, marker=False, fmt=...)
}}}
We will try to add this feature to siprtmp.py soon, in the next version.

On the other hand, if you do want to use the SIP INFO method, you can use the following example. In siprtmp.py, the Context's self.session represents the voip.Session object of the existing session. Session has a ua object representing the Dialog which has createRequest and sendRequest methods. You can use them as follows.
{{{
ua = self.session.ua
m = ua.createRequest("INFO")
m['Content-Type'] = rfc3261.Header('application/dtmf-relay', 'Content-Type')
m.body = 'Signal=5\nDuration=160'
ua.sendRequest(m)
}}}
This will send out the SIP INFO request in the current dialog/session with Content-Type of "application/dtmf-relay" and content of
{{{
Signal=5
Duration=160
}}}
The Content-Length will automatically be added correctly to the request.

=== How to send SIP MESSAGE for instant message? ===

You can send SIP MESSAGE in an established call in siprtmp.py using Context's self.session (which is voip.Session object) as follows. In class Context add the following:
{{{
    def rtmp_sendMessage(self, message):
        try:  yield self.session.send(message)
        except: pass
}}}
The Session class uses Content-Type of text/plain to send a SIP MESSAGE with given message as content. 
Now you can call "sendMessage" with argument "message" from your Flash application using NetConnection's call method.

To receive incoming SIP MESSAGE, in Context's {{{_sessionhandler}}} method, similar to the check for "close" add the following check.
{{{
                if cmd == 'send': self.client.call('receivedMessage', arg)
}}}
Then add a public function of receivedMessage(text:String) in your ActionScript class for NetConnection.client. If you are using Flash-VideoIO, define receivedMessage in your HTML/Javascript page that embeds VideoIO.swf.

If you want to send a out-of-dialog paging-mode SIP MESSAGE, you need to use sendIM of user object itself.
{{{
    def rtmp_sendPagingMessage(self, dest, message):
        try: result, reason = yield self.user.sendIM(dest, message)
        except: pass
}}}
On incoming side, you will need to modify Context's {{{_incominghandler}}} parallel to close as follows:
{{{
                elif cmd == 'send': # incoming paging SIP MESSAGE
                    source, body = arg # arg is actually a tuple
                    self.client.call("receivedPagingMessage", str(source), str(body))
}}}
And define public function receivedPagingMessage(src:String, body:String) in your ActionScript.

We will try to add instant message send/receive in the code, if there are huge demand for this. Please send a request on the support group to demand this feature.